{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","gender","weight","species","className","src","alt","CardList","people","map","user","i","key","url","mass","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","urls","a","Promise","all","fetch","response","json","page1","page2","page3","page4","page5","page6","page7","page8","page9","peopleResults","results","console","log","getData","this","filteredPeople","filter","person","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb8df602.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, gender, weight, species}) => {\r\n    \r\n    return (\r\n        <div className='tc bg-moon-gray dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${species}?200x200`} alt='robots'/>\r\n            <div>\r\n                <h2> {name} </h2>\r\n                <p> Gender: {gender} </p>\r\n                <p> Weight: {weight} </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport { people } from '../people'; // redundant because we destructure it below in the \"const Cardlist\"\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ people }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                people.map((user, i) => { // second part of a map is always the index (i)\r\n                    return ( \r\n                        <Card \r\n                        key={people[i].url} \r\n                        species={people[i].species} \r\n                        name={people[i].name} \r\n                        gender={people[i].gender} \r\n                        weight={people[i].mass}\r\n                        />\r\n                        );\r\n                    })\r\n}\r\n            \r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-light-gray w-20 tc\"\r\n            type=\"search\" \r\n            placeholder=\"Search Star Wars Characters\"\r\n            onChange={searchChange}\r\n         />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\n\r\nexport default SearchBox","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '80vh'}}> \r\n            {props.children}\r\n        </div>\r\n    ) \r\n    \r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\n// import { people } from './people';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            people: [], // basic state is an empty array\r\n            searchfield: '' // basic state is empty\r\n        }\r\n    }\r\n\r\n    componentDidMount() {       \r\n        \r\n        const urls = [\r\n            'https://swapi.py4e.com/api/people/',\r\n            'https://swapi.py4e.com/api/people/?page=2',\r\n            'https://swapi.py4e.com/api/people/?page=3',\r\n            'https://swapi.py4e.com/api/people/?page=4',\r\n            'https://swapi.py4e.com/api/people/?page=5',\r\n            'https://swapi.py4e.com/api/people/?page=6',\r\n            'https://swapi.py4e.com/api/people/?page=7',\r\n            'https://swapi.py4e.com/api/people/?page=8',\r\n            'https://swapi.py4e.com/api/people/?page=9'\r\n          ]\r\n\r\n          const getData = async () => {\r\n              try {\r\n                const [ page1, page2, page3, page4, page5, page6, page7, page8, page9 ] = await Promise.all(urls.map(async function(url) {\r\n                    const response = await fetch(url);\r\n                    const json = await response.json();\r\n                    return json\r\n                }));\r\n                // const peopleResults = Object.assign(page1.results, page2.results, page3.results);  // This didn't work because page3 would overide the previous pages because they had the same keys as previous pages\r\n                // const peopleResults = page1.results.concat(page2.results, page3.results) // HELLLLLL YEAH! Got it working!! In order to get all them working I needed to concatenate all of the arrays together that are accessed through the page.results\r\n                const peopleResults = [...page1.results, ...page2.results, ...page3.results, ...page4.results, ...page5.results, ...page6.results, ...page7.results, ...page8.results, ...page9.results,]    // updated to spread syntax to be more up-to-date\r\n                this.setState({ people: peopleResults}); // Had to remove the \"set state to outside the second async function\"\r\n                console.log('page1', page1.results);\r\n                console.log('page2', page2.results);\r\n                console.log('page3', page3.results);\r\n              } catch (error) {\r\n                  console.log(error);\r\n              }\r\n            }\r\n\r\n            getData()\r\n          \r\n\r\n\r\n\r\n        // fetch('https://swapi.co/api/people')\r\n        //     .then(response => response.json())\r\n        //     .then((data) => {\r\n        //         this.setState({ people: data.results })\r\n        //     })\r\n    }\r\n    \r\n\r\n\r\n    \r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n    \r\n    }\r\n\r\n    render() {\r\n        const { people, searchfield } = this.state; // destructuring this.state which allows us to just use people/searchfield instead of this.state.searchfield/people\r\n        const filteredPeople = people.filter(person => {\r\n            return person.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return !people.length ?  // if people.length is equal to 0\r\n            <h1> Loading.... </h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Star Wars Api Project</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <CardList people={filteredPeople} />\r\n                    </Scroll>\r\n                     \r\n                </div>\r\n\r\n\r\n                // This ^^^ is the same as this below\r\n\r\n        //    if (!people.length) { // if people.length is equal to 0\r\n        //     return <h1> Loading.... </h1>\r\n        // } else {\r\n        //     return (\r\n        //         <div className='tc'>\r\n        //             <h1 className='f1'>Star Wars Api Project</h1>\r\n        //             <SearchBox searchChange={this.onSearchChange} />\r\n        //             <Scroll>\r\n        //                 <CardList people={filteredPeople} />\r\n        //             </Scroll>\r\n                     \r\n        //         </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(\r\n           <App />               \r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}